AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    Book

    The lambdas that are responsible for searching for a book in the Google Book API.

Resources:

    APIRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: Allow
                        Principal:
                            Service: apigateway.amazonaws.com
                        Action: sts:AssumeRole

    RolePolicies:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: "BookDeliveryPolicy"
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Action: "*"
                        Resource: "*"
            Roles:
                -
                    Ref: "APIRole"

    # BookIdentityPool:
    #     Type: AWS::Cognito::IdentityPool
    #     Properties:
    #         IdentityPoolName: BookDbIdentityPool

    BookUserPool:
        Type: AWS::Cognito::UserPool
        Properties:
            UserPoolName: BookDbUserPool
            # UsernameAttributes:
            # - phone_number
            # - email
            AutoVerifiedAttributes:
            - email
            Schema:
                -
                    AttributeDataType: String
                    Mutable: false
                    Name: email
                    Required: true
            Policies:
                PasswordPolicy:
                    MinimumLength: 8
                    RequireLowercase: true
                    RequireSymbols: false
                    RequireUppercase: false
                    RequireNumbers: false

    BookDeliveryApi:
        Type: AWS::Serverless::Api
        Properties:
            StageName: Prod
            DefinitionBody:
                swagger: 2.0
                info:
                    title:
                        Ref: AWS::StackName
                paths:
                    /book/{isbn}:
                        get:
                            produces:
                            - "application/json"
                            responses:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/FindBook"
                            security:
                                - CognitoAuthorizer: []
                            x-amazon-apigateway-integration:
                                credentials: !GetAtt APIRole.Arn
                                uri: "arn:aws:apigateway:eu-central-1:dynamodb:action/GetItem"
                                responses:
                                    default:
                                        statusCode: "200"
                                        responseTemplates:
                                            application/json: "#set($inputRoot = $input.path('$'))
                                                                {
                                                                #if($inputRoot.Item != '')
                                                                #set($elem = $inputRoot.Item)
                                                                #if($elem.reputation.S == 'conclusive')
                                                                \"book\": {
                                                                    \"isbn\": \"$elem.isbn.S\",
                                                                    \"reputation\": \"$elem.reputation.S\",
                                                                    \"description\":\"$util.escapeJavaScript($elem.volumeInfo.M.description.S).replaceAll(\"\\\\'\",\"'\")\",
                                                                    \"title\":\"$util.escapeJavaScript($elem.volumeInfo.M.title.S).replaceAll(\"\\\\'\",\"'\")\",
                                                                    \"subtitle\":\"$util.escapeJavaScript($elem.volumeInfo.M.subtitle.S).replaceAll(\"\\\\'\",\"'\")\",
                                                                    \"authors\": [
                                                                #foreach($author in $elem.volumeInfo.M.authors.L)
                                                                    \"$author.S\" #if($foreach.hasNext),#end
                                                                #end
                                                                    ],
                                                                    \"thumbnail\": \"$elem.volumeInfo.M.imageLinks.M.thumbnail.S\",
                                                                    \"smallThumbnail\": \"$elem.volumeInfo.M.imageLinks.M.smallThumbnail.S\",
                                                                    \"publishedDate\": \"$elem.volumeInfo.M.publishedDate.S\",
                                                                    \"pageCount\": \"$elem.volumeInfo.M.pageCount.N\"
                                                                }
                                                                #end

                                                                #if($elem.reputation.S == 'inconclusive')
                                                                \"book\": {
                                                                    \"isbn\": \"$elem.isbn.S\",
                                                                    \"reputation\": \"$elem.reputation.S\"
                                                                }
                                                                #end
                                                                #end
                                                                }"
                                        
                                passthroughBehavior: "when_no_templates"
                                httpMethod: "POST"
                                requestTemplates:
                                    application/json: "{\"TableName\":\"books\", \"Key\":{\"isbn\":{\"S\":\"$input.params('isbn')\"},\"subject\":{\"S\": \"$context.authorizer.claims['sub']\"}}, \"ProjectionExpression\":\"isbn, volumeInfo.description, volumeInfo.title, volumeInfo.subtitle, volumeInfo.imageLinks, volumeInfo.authors, volumeInfo.publishedDate, volumeInfo.pageCount, reputation\"}"
                                type: "aws"                    
                    /book:
                        get:
                            produces:
                            - "application/json"
                            responses:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/AllBooks"
                            security:
                                - CognitoAuthorizer: []
                            x-amazon-apigateway-integration:
                                credentials: !GetAtt APIRole.Arn
                                uri: "arn:aws:apigateway:eu-central-1:dynamodb:action/Scan"
                                responses:
                                    default:
                                        statusCode: "200"
                                        responseTemplates:
                                            application/json: "#set($inputRoot = $input.path('$'))
                                                                {
                                                                \"books\": [
                                                                #foreach($elem in $inputRoot.Items)
                                                                #if($elem.reputation.S == 'conclusive')
                                                                {
                                                                    \"isbn\": \"$elem.isbn.S\",
                                                                    \"reputation\": \"$elem.reputation.S\",
                                                                    \"description\":\"$util.escapeJavaScript($elem.volumeInfo.M.description.S).replaceAll(\"\\\\'\",\"'\")\",
                                                                    \"title\":\"$util.escapeJavaScript($elem.volumeInfo.M.title.S).replaceAll(\"\\\\'\",\"'\")\",
                                                                    \"subtitle\":\"$util.escapeJavaScript($elem.volumeInfo.M.subtitle.S).replaceAll(\"\\\\'\",\"'\")\",
                                                                    \"authors\": [
                                                                #foreach($author in $elem.volumeInfo.M.authors.L)
                                                                        \"$author.S\" #if($foreach.hasNext),#end
                                                                #end
                                                                    ],
                                                                    \"thumbnail\": \"$elem.volumeInfo.M.imageLinks.M.thumbnail.S\",
                                                                    \"smallThumbnail\": \"$elem.volumeInfo.M.imageLinks.M.smallThumbnail.S\",
                                                                    \"publishedDate\": \"$elem.volumeInfo.M.publishedDate.S\",
                                                                    \"pageCount\": \"$elem.volumeInfo.M.pageCount.N\"
                                                                    }#if($foreach.hasNext),#end
                                                                #end
                                                                #end
                                                                ],
                                                                \"inconclusive\":[
                                                                    #foreach($elem in $inputRoot.Items)
                                                                    #if($elem.reputation.S == 'inconclusive')
                                                                    {
                                                                        \"isbn\": \"$elem.isbn.S\",
                                                                        \"reputation\": \"$elem.reputation.S\"
                                                                        }#if($foreach.hasNext),#end
                                                                    #end
                                                                    #end
                                                                ]
                                                                }"
                                passthroughBehavior: "when_no_templates"
                                httpMethod: "POST"
                                requestTemplates:
                                    application/json: "{\"TableName\":\"books\", \"FilterExpression\": \"subject = :val\", \"ExpressionAttributeValues\": {\":val\": {\"S\": \"$context.authorizer.claims['sub']\"}}, \"ProjectionExpression\":\"isbn, volumeInfo.description, volumeInfo.title, volumeInfo.subtitle, volumeInfo.imageLinks, volumeInfo.authors, volumeInfo.publishedDate, volumeInfo.pageCount, reputation\"}"
                                type: "aws"
                        post:
                            consumes:
                            - "application/json"
                            produces:
                            - "application/json"
                            parameters:
                            -
                                in: "body"
                                name: "BookIdentifier"
                                required: true
                                schema:
                                    $ref: "#/definitions/BookIdentifier"
                            responses:
                                "201":
                                    description: "201 response"
                            security:
                                - CognitoAuthorizer: []
                            x-amazon-apigateway-request-validator: "Validate body"
                            x-amazon-apigateway-integration:
                                credentials: !GetAtt APIRole.Arn
                                uri: "arn:aws:apigateway:eu-central-1:kinesis:action/PutRecord"
                                responses:
                                    default:
                                        statusCode: "201"
                                        responseTemplates:
                                            application/json: "{}"
                                passthroughBehavior: "when_no_templates"
                                httpMethod: "POST"
                                requestTemplates:
                                    application/json: "#set($input.path('$').sub = $context.authorizer.claims[\"sub\"]) #set($input.path('$').email = $context.authorizer.claims[\"email\"]){\n    \"Data\":\"$util.base64Encode(\"$input.json('$')\"\
                                        )\",\n    \"PartitionKey\":\"1\",\n    \"StreamName\":\"book-received\"\
                                        \n}"
                                type: "aws"
                securityDefinitions:
                    CognitoAuthorizer:
                        type: "apiKey"
                        name: "Authorization"
                        in: "header"
                        x-amazon-apigateway-authtype: "cognito_user_pools"
                        x-amazon-apigateway-authorizer:
                            providerARNs:
                            - !GetAtt BookUserPool.Arn
                            type: "cognito_user_pools"
                definitions:
                    BookIdentifier:
                        type: "object"
                        required:
                        - "isbn"
                        properties:
                            isbn:
                                type: "string"
                        description: "A simple book object with just an ISBN"
                    Book:
                        type: "object"
                        properties:
                            isbn:
                                type: "string"
                            description:
                                type: "string"
                            title:
                                type: "string"
                            subtitle:
                                type: "string"
                            thumbnail:
                                type: "string"
                            smallThumbnail:
                                type: "string"
                            publishedDate:
                                type: "string"
                            pageCount:
                                type: "integer"                                
                            authors:
                                type: "array"
                                items:
                                    type: "number"
                    FindBook:
                        type: "object"
                        properties:
                            book:
                                "$ref": "#/definitions/Book"
                    AllBooks:
                        type: "object"
                        properties:
                            books:
                                type: "array"
                                items:
                                    "$ref": "#/definitions/Book"
                            inconclusive:
                                type: "array"
                                items:
                                    "$ref": "#/definitions/BookIdentifier"
                x-amazon-apigateway-request-validators:
                    Basic:
                        validateRequestParameters: false
                        validateRequestBody: true                        
                    Validate body:
                        validateRequestParameters: false
                        validateRequestBody: true

    BookReceivedStream:
        Type: AWS::Kinesis::Stream
        Properties:
            Name: book-received
            ShardCount: 1

    SaveBookDynamo:
        Type: AWS::DynamoDB::Table
        Properties:
            AttributeDefinitions:
                -
                    AttributeName: "isbn"
                    AttributeType: "S"
                -
                    AttributeName: "subject"
                    AttributeType: "S"
            KeySchema:
                -
                    AttributeName: "isbn"
                    KeyType: "HASH"
                -
                    AttributeName: "subject"
                    KeyType: "RANGE"
            ProvisionedThroughput:
                ReadCapacityUnits: "5"
                WriteCapacityUnits: "5"
            TableName: "books"

    SearchBookFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: search-book-src/search_book/build/
            Handler: app.lambda_handler
            Timeout: 30
            Policies:
                - AmazonDynamoDBFullAccess
            Runtime: python3.6
            Environment:
                Variables:
                    PARAM1: VALUE
            Events:
                BookReceivedKinesis:
                    Type: Kinesis
                    Properties:
                        Stream:
                            'Fn::GetAtt':
                                - BookReceivedStream
                                - Arn
                        StartingPosition: TRIM_HORIZON
                        BatchSize: 10

Outputs:

    SearchBookFunction:
      Description: "Search Book Lambda Function ARN"
      Value: !GetAtt SearchBookFunction.Arn

    SearchBookFunctionIamRole:
      Description: "Implicit IAM Role created for Search Book Function"
      Value: !GetAtt SearchBookFunctionRole.Arn